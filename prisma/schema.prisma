// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials auth
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts     Account[]
  sessions     Session[]
  posts        Post[]
  comments     Comment[]
  likes        Like[]
  aiGenerations AIGeneration[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Blog CMS Models
model Post {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  excerpt     String?
  content     String      @db.Text
  status      PostStatus  @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // SEO Fields
  metaTitle       String?
  metaDescription String?
  keywords        String[]
  
  // Analytics Fields
  views       Int @default(0)
  likes       Int @default(0)
  readTime    Int @default(0) // in minutes
  
  // AI Fields
  aiGenerated Boolean @default(false)
  aiPrompt    String?
  
  // Author
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Relations
  categories    PostCategory[]
  tags          PostTag[]
  comments      Comment[]
  postLikes     Like[]
  analytics     Analytics[]
  aiGenerations AIGeneration[]
  
  @@map("posts")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?  // Hex color for UI
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  posts PostCategory[]
  
  @@map("categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  color     String?  // Hex color for UI
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  posts PostTag[]
  
  @@map("tags")
}

// Junction Tables
model PostCategory {
  postId     String
  categoryId String
  
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([postId, categoryId])
  @@map("post_categories")
}

model PostTag {
  postId String
  tagId  String
  
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Self-referencing for replies
  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
  
  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
  @@map("likes")
}

// Analytics Models
model Analytics {
  id        String      @id @default(cuid())
  date      DateTime    @default(now())
  type      AnalyticsType
  value     Int
  metadata  Json?       // Store additional data
  
  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: SetNull)
  
  @@map("analytics")
}

// AI Content Generation Models
model AIGeneration {
  id        String         @id @default(cuid())
  type      AIGenerationType
  prompt    String         @db.Text
  response  String         @db.Text
  model     String         // GPT-4, Claude, etc.
  tokens    Int?
  cost      Float?
  createdAt DateTime       @default(now())
  
  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: SetNull)
  
  @@map("ai_generations")
}

// Enums
enum Role {
  USER
  ADMIN
  EDITOR
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

enum AnalyticsType {
  VIEW
  LIKE
  COMMENT
  SHARE
  ENGAGEMENT
}

enum AIGenerationType {
  OUTLINE
  CONTENT
  TITLE
  EXCERPT
  SEO_KEYWORDS
  IMPROVEMENT
}
